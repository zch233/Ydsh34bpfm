"use strict";(self["webpackChunkvue2_cli5"]=self["webpackChunkvue2_cli5"]||[]).push([[13],{13013:function(n,e,t){t.r(e),t.d(e,{default:function(){return d}});var r=function(){var n=this,e=n.$createElement;n._self._c;return n._m(0)},a=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("section",[t("html",[t("head"),t("body",[t("h2",[n._v("base64 转换为 file 文件")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[n._v("export const base64toFile = (base64, filename) => {\n  let arr = base64.split(','),\n    mime = arr[0].match(/:(.*?);/)[1],\n    bstr = atob(arr[1]),\n    n = bstr.length,\n    u8arr = new Uint8Array(n);\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new File([u8arr], filename, { type: mime });\n};\n")])]),t("h2",[n._v("上传文件至 OSS(需要配合后端接口)")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[n._v("export const uploadToOSS = async ({ file, type = 'img' }) => {\n  const { data } = await getOSSConfig({\n    ext: `.${file.name.split('.').pop().toLowerCase()}`,\n    type,\n  });\n  let formData = new FormData();\n  formData.append('key', data.key);\n  formData.append('name', file.name);\n  formData.append('policy', data.config.policy);\n  formData.append('OSSAccessKeyId', data.config.accessid);\n  formData.append('success_action_status', '200');\n  formData.append('callback', '');\n  formData.append('signature', data.config.signature);\n  formData.append('file', file);\n  await Axios.post(data.config.host, formData, {\n    'Content-Type': 'multipart/form-data',\n  });\n  return data.url;\n};\n")])]),t("h2",[n._v("获取浏览器信息")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[n._v("export const getBrowser = () => {\n  return {\n    versions: (function () {\n      const u = navigator.userAgent;\n      return {\n        trident: u.indexOf('Trident') > -1, //IE内核\n        presto: u.indexOf('Presto') > -1, //opera内核\n        webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核\n        gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') === -1, //火狐内核\n        mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端\n        ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端\n        android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或者uc浏览器\n        iPhone: u.indexOf('iPhone') > -1, //是否为iPhone或者QQHD浏览器\n        iPad: u.indexOf('iPad') > -1, //是否iPad\n        dingtalk: u.indexOf('DingTalk') > -1, //是否为钉钉内部\n        alipay: u.indexOf('AlipayClient') > -1, //是否为支付宝\n        wechat: /MicroMessenger/i.test(u), //是否微信中\n        webApp: u.indexOf('Safari') === -1, //是否web应该程序，没有头部与底部\n        dtDreamApp: u.toLowerCase().indexOf('dtdreamweb') > -1, // 浙里办 APP\n        alipayMini: u.toLowerCase().indexOf('miniprogram') > -1 && u.toLowerCase().indexOf('alipay') > -1, // 浙里办支付宝小程序\n      };\n    })(),\n    language: (navigator.browserLanguage || navigator.language).toLowerCase(),\n  };\n};\n")])]),t("h2",[n._v("获取/设置 location.search 的参数 （一般用于是否存在 devmode 和 debug 的判断）")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[n._v("export const queryString = {\n    get(name) {\n        const getAll = searchString => {\n            const query = searchString.replace(/^\\?/, '');\n            const queryObject = {};\n            const queryArray = query.split('&').filter(i => i).forEach((string, index) => {\n                const parts = string.split('=');\n                queryObject[parts[0]] = decodeURIComponent(parts[1]);\n            });\n            return queryObject;\n        };\n        if (arguments.length === 0) {\n            return getAll(window.location.search);\n        } else {\n            return getAll(window.location.search)[name];\n        }\n    },\n    set(name, value) {\n        const set = (search, name, value) => {\n            const regex = new RegExp(`(${encodeURIComponent(name)})=([^&]*)`, '');\n            if (regex.test(search)) {\n                return search.replace(regex, (match, c1, c2) => `${c1}=${encodeURIComponent(value)}`);\n            } else {\n                return search.replace(/&?$/, `&${encodeURIComponent(name)}=${encodeURIComponent(value)}`);\n            }\n        };\n        if (arguments.length === 1 && typeof name === 'object' && name !== null) {\n            let search = window.location.search;\n            for (let key in arguments[0]) {\n                search = set(search, key, arguments[0][key]);\n            }\n            window.location.search = search;\n        } else {\n            window.location.search = set(window.location.search, name, value);\n        }\n    },\n}\n")])]),t("h2",[n._v("前端验证身份证")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[n._v("export const testIdCard = (idCard) => {\n    idCard = idCard.toString();\n    const city = { 11: '北京', 12: '天津', 13: '河北', 14: '山西', 15: '内蒙古', 21: '辽宁', 22: '吉林', 23: '黑龙江', 31: '上海', 32: '江苏', 33: '浙江', 34: '安徽', 35: '福建', 36: '江西', 37: '山东', 41: '河南', 42: '湖北', 43: '湖南', 44: '广东', 45: '广西', 46: '海南', 50: '重庆', 51: '四川', 52: '贵州', 53: '云南', 54: '西藏', 61: '陕西', 62: '甘肃', 63: '青海', 64: '宁夏', 65: '新疆', 71: '台湾', 81: '香港', 82: '澳门', 91: '国外' };\n    let num = idCard.toUpperCase();\n    if (!/(^\\d{15}$)|(^\\d{17}([0-9]|X)$)/.test(num)) {\n        throw '身份证位数错误！';\n    }\n    if (city[parseInt(num.substr(0, 2))] === undefined) {\n        throw '身份证格式错误！';\n    }\n    const len = num.length;\n    let re = null;\n    if (len === 15) {\n        re = new RegExp(/^(\\d{6})(\\d{2})(\\d{2})(\\d{2})(\\d{3})$/);\n        const arrSplit = num.match(re);\n        const dtmBirth = new Date('19' + arrSplit[2] + '/' + arrSplit[3] + '/' + arrSplit[4]);\n        const bGoodDay =\n            dtmBirth.getYear() === Number(arrSplit[2]) &&\n            dtmBirth.getMonth() + 1 === Number(arrSplit[3]) &&\n            dtmBirth.getDate() === Number(arrSplit[4]);\n        if (!bGoodDay) {\n            throw '身份证日期格式错误'\n        } else {\n            const arrInt = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n            const arrCh = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\n            let nTemp = 0;\n            num = num.substr(0, 6) + '19' + num.substr(6, num.length - 6);\n            for (let i = 0; i < 14; i++) {\n                nTemp += num.substr(i, 1) * arrInt[i];\n            }\n            num += arrCh[nTemp % 11];\n            return true;\n        }\n    }\n    if (len === 18) {\n        re = new RegExp(/^(\\d{6})(\\d{4})(\\d{2})(\\d{2})(\\d{3})([0-9]|X)$/);\n        const arrSplit = num.match(re);\n        const dtmBirth = new Date(arrSplit[2] + '/' + arrSplit[3] + '/' + arrSplit[4]);\n        const bGoodDay =\n            dtmBirth.getFullYear() === Number(arrSplit[2]) &&\n            dtmBirth.getMonth() + 1 === Number(arrSplit[3]) &&\n            dtmBirth.getDate() === Number(arrSplit[4])\n        if (!bGoodDay) {\n            throw '身份证日期格式错误'\n        } else {\n            let valnum;\n            const arrInt = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n            const arrCh = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\n            let nTemp = 0;\n            for (let i = 0; i < 17; i++) {\n                nTemp += num.substr(i, 1) * arrInt[i];\n            }\n            valnum = arrCh[nTemp % 11];\n            if (valnum !== num.substr(17, 1)) {\n                throw '身份证格式错误！'\n            }\n            return true;\n        }\n    }\n}\n")])]),t("h2",[n._v("手机号和身份证号正则验证")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[n._v("export const validataIdCard = idCard => /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/.test(idCard);\n\nexport const validatePhone = phone => /^[1][3-9][0-9]{9}$/.test(phone);\n")])]),t("h2",[n._v("响应体是文件流的文件下载处理")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[n._v("// 注意：需要配置 axios config 的 responseType: 'blob'\nexport const downloadFile = response => {\n    console.log('response.data.type:', response.data.type);\n    return new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n        fileReader.onload = function () {\n            try {\n                const jsonData = JSON.parse(this.result); // 成功 说明是普通对象数据\n                console.error('非文件流响应');\n                reject(jsonData);\n            } catch (err) {\n                // 解析成对象失败，说明是正常的文件流\n                const blob = new Blob([response.data]);\n                // 本地保存文件\n                const url = window.URL.createObjectURL(blob);\n                const link = document.createElement('a');\n                link.href = url;\n                const filename = response?.headers?.['content-disposition']?.split('filename*=')?.[1]?.substr(7);\n                link.setAttribute('download', decodeURI(filename));\n                document.body.appendChild(link);\n                link.click();\n                resolve(response.data);\n            }\n        };\n        fileReader.readAsText(response.data);\n    });\n};\n")])]),t("h2",[n._v("根据身份证号获取年龄和性别")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[n._v("export const getIDCardAge = identityCard => {\n  let len = (identityCard + '').length;\n  let strBirthday = '';\n  if (len === 18) {\n    //处理18位的身份证号码从号码中得到生日和性别代码\n    strBirthday = identityCard.substr(6, 4) + '/' + identityCard.substr(10, 2) + '/' + identityCard.substr(12, 2);\n  }\n  if (len === 15) {\n    let birthdayValue = identityCard.charAt(6) + identityCard.charAt(7);\n    if (parseInt(birthdayValue) < 10) {\n      strBirthday = '20' + identityCard.substr(6, 2) + '/' + identityCard.substr(8, 2) + '/' + identityCard.substr(10, 2);\n    } else {\n      strBirthday = '19' + identityCard.substr(6, 2) + '/' + identityCard.substr(8, 2) + '/' + identityCard.substr(10, 2);\n    }\n  }\n  //时间字符串里，必须是“/”\n  let birthDate = new Date(strBirthday);\n  let nowDateTime = new Date();\n  let age = nowDateTime.getFullYear() - birthDate.getFullYear();\n  //再考虑月、天的因素;.getMonth()获取的是从0开始的，这里进行比较，不需要加1\n  if (nowDateTime.getMonth() < birthDate.getMonth() || (nowDateTime.getMonth() === birthDate.getMonth() && nowDateTime.getDate() < birthDate.getDate())) {\n    age--;\n  }\n  return age || 0;\n};\n\nexport const getIDCardSex = idCard => {\n  if (idCard.length === 15) {\n    return idCard.substring(14, 15) % 2;\n  } else if (idCard.length === 18) {\n    return idCard.substring(14, 17) % 2;\n  } else {\n    //不是15或者18,null\n    return 0;\n  }\n};\n")])]),t("h2",[n._v("计算一个月有几周，不足一周也按一周计算")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[n._v("export const getMonthWeekCount = (month?: string, fromStart = 1) => {\n    // fromStart -> 定义周的第一天是周几,默认是周一\n    // w -> 计算该月1号是周几,0是周日.\n    const w = dayjs(month).day();\n    // 该月的天数\n    const d = dayjs(month).daysInMonth();\n    // 根绝fromStart和w的结果,算出第一周有几天\n    const firstWeekDays = w ? (7 + fromStart - w) % 7 : fromStart ? fromStart : 7 - fromStart;\n    // 计算该月有几周\n    return Math.ceil((d - firstWeekDays) / 7) + 1;\n};\n\n// 计算上面当月具体每周的详情\nexport const getMonthWeeks = (month?: string) => {\n    const m = dayjs(month).format('YYYY-MM');\n    const monthWeekCount = getMonthWeekCount(m);\n    const monthFirstDay = dayjs(m).startOf('month');\n    const monthLastDay = dayjs(m).endOf('month');\n    return [...Array(monthWeekCount).keys()].map(index => {\n        const startTime = index === 0 ? monthFirstDay : dayjs(monthFirstDay).add(index, 'week').startOf('week').add(1, 'days');\n        const endTime = index === monthWeekCount - 1 ? monthLastDay : dayjs(monthFirstDay).add(index, 'week').endOf('week').add(1, 'days');\n        return {\n            key: `${startTime.format('YYYY-MM-DD')}-${endTime.format('YYYY-MM-DD')}`,\n            start_time: startTime.format('YYYY-MM-DD'),\n            end_time: endTime.format('YYYY-MM-DD'),\n            active: dayjs().isAfter(startTime) && dayjs().isBefore(endTime),\n        };\n    });\n};\n\n")])])])])])}],o=t(1001),i={},s=(0,o.Z)(i,r,a,!1,null,null,null),d=s.exports}}]);